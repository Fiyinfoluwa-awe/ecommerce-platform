name: Webapp CI/CD

on:
    push:
        paths:
            - 'webapp/**'  # Trigger only when changes are pushed to the webapp folder
        branches:
            - main     # Deploy only when changes are pushed to the main branch

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
          # 1. Checkout code 
            - name: Checkout code
              uses: actions/checkout@v3
          
          # 2. Setup Node.js
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with: 
                node-version: '18.x'

          # 3. Install Dependencies and Build React App
            - name: Install dependencies
              working-directory: ./webapp
              run: npm install

            - name: Build Webapp
              working-directory: ./webapp
              run: npm run build

          # 4. Configure AWS CLI 
            - name:  Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v3
              with: 
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION}}  

          # 5. Login to Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

          # 6. Build Docker Image
            - name: Build Docker Image
              working-directory: ./webapp
              run: |
                docker build -t react-frontend .

          # 7. Tag and Push Image to ECR
            - name: Push Docker Image to ECR
              env: 
                ECR_REPOSITORY: e-commercefrontend
                IMAGE_TAG: latest
              run: | 
                ECR_URI=${{ steps.login-ecr.outputs.registry }}/e-commercefrontend    
                docker tag react-frontend:latest $ECR_URI:latest
                  docker push $ECR_URI:latest

          # 8. Deploy the image to to EC2 or ECS 
            - name: Deploy to Amazon ECS
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with: 
                task-definition: ./webapp/ecs-task-definition.json
                service: react-frontend-service
                cluster: react-frontend-cluster
                wait-for-service-stability: true


            
    

            
